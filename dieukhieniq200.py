import serial
import time
import pdb
import pyvisa
import os
import subprocess
import glob
import numpy as np
import re
from docx import Document
from datetime import datetime

  
rm = pyvisa.ResourceManager('@py')
# K·∫øt n·ªëi hai m√°y ƒëo


ip_1 = "TCPIP0::169.254.207.15::inst0::INSTR"
ip_2 = "TCPIP0::169.254.207.25::inst0::INSTR"

# K·∫øt n·ªëi m√°y ph√°t v√† m√°y thu
try:
    sig_anl = rm.open_resource(ip_1)
    print("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!")
    print("Th√¥ng tin m√°y ƒëo:", sig_anl.query("*IDN?"))
except pyvisa.VisaIOError as e:
    print("‚ùå L·ªói k·∫øt n·ªëi:", e)
try:
    sig_gen = rm.open_resource(ip_2)
    print("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!")
    print("Th√¥ng tin m√°y ƒëo:", sig_gen.query("*IDN?"))
except pyvisa.VisaIOError as e:
    print("‚ùå L·ªói k·∫øt n·ªëi:", e)

# L·ªánh ƒë·ªÉ gi·∫øt t·∫•t c·∫£ ti·∫øn tr√¨nh s·ª≠ d·ª•ng c·ªïng /dev/tty.usbserial-120
def kill_process():
    command = "kill -9 $(lsof -t /dev/tty.usbserial-120)"

    try:
        # Th·ª±c thi l·ªánh shell
        subprocess.run(command, shell=True, check=True)
        print("‚úÖ ƒê√£ t·∫Øt c√°c ti·∫øn tr√¨nh ƒëang s·ª≠ d·ª•ng c·ªïng /dev/tty.usbserial-120.")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói khi th·ª±c thi l·ªánh: {e}")
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
kill_process()


# C·∫•u h√¨nh c·ªïng Serial


def choose_serial_port():
    # Li·ªát k√™ c√°c c·ªïng serial c√≥ d·∫°ng /dev/tty.*
    ports = glob.glob('/dev/tty.*')

    if not ports:
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªïng serial n√†o.")
        return None

    # Hi·ªÉn th·ªã danh s√°ch c·ªïng
    print("üîå Danh s√°ch c·ªïng serial c√≥ s·∫µn:")
    for idx, port in enumerate(ports, 1):
        print(f"{idx}. {port}")

    # Ch·ªçn c·ªïng
    while True:
        try:
            choice = int(input("üëâ Nh·∫≠p s·ªë th·ª© t·ª± c·ªïng b·∫°n mu·ªën d√πng: "))
            if 1 <= choice <= len(ports):
                return ports[choice - 1]
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i.")
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")

# Ch·∫°y h√†m ch·ªçn c·ªïng
port_name = choose_serial_port()

if port_name:
    baud_rate = 115200  # T·ªëc ƒë·ªô baud IQ200
    iq200 = serial.Serial(port_name, baud_rate, timeout=5, rtscts=False, dsrdtr=False)
    print(f"‚úÖ ƒê√£ k·∫øt n·ªëi ƒë·∫øn {port_name} v·ªõi baudrate {baud_rate}")
else:
    print("‚õî Kh√¥ng c√≥ c·ªïng n√†o ƒë∆∞·ª£c ch·ªçn. Tho√°t ch∆∞∆°ng tr√¨nh.")


def send_and_wait(command, expect_prompt, timeout=2, retries=20):
    for attempt in range(retries):
        iq200.reset_input_buffer()
        iq200.reset_output_buffer()
        iq200.write(command)
        iq200.flush()
        start_time = time.time()
        response = ''
        response_line = ''
        while time.time() - start_time < timeout:
            if iq200.in_waiting:
                response_line = iq200.readline().decode('ascii', errors='ignore')
                # print(response_line)
                response += response_line
                if expect_prompt in response_line:
                    print(f"Sent: {command.strip()}, Received: {response.strip()}")
                    return response
            time.sleep(0.1)
        print(f"ƒêang ki·ªÉm tra {command} l·∫ßn th·ª© {attempt + 1} tr·∫£ v·ªÅ {response}. Retrying...")
    raise ValueError(f"Expected prompt '{expect_prompt}' not found in response after {retries} attempts.")


    #ƒêƒÉng nh·∫≠p IQ200
# ƒêƒÉng nh·∫≠p v√†o IQ200
def iq200_login():
    skip = input("üëâ B·ªè qua ƒëƒÉng nh·∫≠p modem? (Y/N): ").strip().lower()
    if skip == 'y':
        print("‚è© B·ªè qua b∆∞·ªõc ƒëƒÉng nh·∫≠p.")
        return True

    try:
        iq200.reset_input_buffer()
        iq200.reset_output_buffer()
        send_and_wait(b"\r\n", expect_prompt="iq-linux login:")
        time.sleep(1)
        send_and_wait(b"root\n", expect_prompt="Password:")
        time.sleep(1)
        iq200.write(b"P@55w0rd!\n")
        time.sleep(1)
        send_and_wait(b"mewsh\n", expect_prompt="[Remote]$")
        time.sleep(1)
        send_and_wait(b"\r\n", expect_prompt="[Remote]$")
        print("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng v√†o IQ200")
        return True

    except Exception as e:
        print(f"‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: {e}")
        retry = input("üîÑ B·∫°n c√≥ mu·ªën th·ª≠ ƒëƒÉng nh·∫≠p l·∫°i kh√¥ng? (y/n): ").strip().lower()
        if retry == 'y':
            return iq200_login()
        else:
            print("‚èπÔ∏è D·ª´ng ƒëƒÉng nh·∫≠p.")
            return False

results_tx = []
results_rx = []
results_10M = []
def iq200_serial():
    global sn_iq200

    try:
        iq200.reset_input_buffer()
        iq200.reset_output_buffer()

        # G·ª≠i l·ªánh tr·∫Øng ƒë·ªÉ "th·ª©c" modem
        send_and_wait(b"\r\n", expect_prompt="[Remote]$")
        
        # G·ª≠i l·ªánh DID v√† ch·ªù prompt [Remote]$
        send_and_wait(b"DID\r\n", expect_prompt="[Remote]$")
        time.sleep(0.5)

        # ƒê·ªçc ph·∫£n h·ªìi
        response = iq200.read_all().decode('ascii', errors='ignore')

        for line in response.splitlines():
            if "SN:" in line:
                # Lo·∫°i b·ªè ph·∫ßn sau d·∫•u "#" n·∫øu c√≥
                line = line.split("#")[0]

                serial_match = re.search(r"SN:\s*(\d+)", line)
                if serial_match:
                    sn_iq200 = serial_match.group(1)
                    print(f"üî¢ Serial Number: {sn_iq200}")
                    return sn_iq200

        print("‚ùå Kh√¥ng t√¨m th·∫•y Serial Number trong ph·∫£n h·ªìi.")
        return None

    except Exception as e:
        print(f"üö® L·ªói khi l·∫•y Serial Number: {e}")
        return None

# Ki·ªÉm tra t·∫ßn s·ªë thu IQ200
def test_rx(iq200):
    global results_rx  
    sig_gen.write("SYST:PRES")
    time.sleep(1)

    try:
        while True:
            freq_input = input("Nh·∫≠p T·∫¶N S·ªê THU (MHz) [start, stop, step] (Enter = m·∫∑c ƒë·ªãnh 950,2150,600): ")
            if not freq_input.strip():  # D√πng m·∫∑c ƒë·ªãnh n·∫øu b·ªè tr·ªëng
                freq_list = np.arange(950, 2150 + 0.01, 600)
                break
            try:
                parts = [x.strip() for x in freq_input.split(",")]
                if len(parts) != 3:
                    raise ValueError("‚ö†Ô∏è B·∫°n c·∫ßn nh·∫≠p ƒë√∫ng 3 s·ªë: start,stop,step")
                start_freq, stop_freq, step_freq = map(float, parts)
                if step_freq <= 0:
                    raise ValueError("‚ö†Ô∏è Step ph·∫£i l√† s·ªë d∆∞∆°ng.")
                freq_list = np.arange(start_freq, stop_freq + step_freq/2, step_freq)
                break
            except ValueError as ve:
                print(f"‚ùå {ve}")

            print(f"T·∫ßn s·ªë ki·ªÉm tra: {list(freq_list)}")


        for frequency_rx in freq_list:
            print(f"\nüì∂ ƒêang ki·ªÉm tra t·∫°i t·∫ßn s·ªë thu: {frequency_rx} MHz")

            # C·∫•u h√¨nh m√°y ph√°t
            sig_gen.write(f"FREQ {frequency_rx} MHz")
            sig_gen.write("OUTP ON")
            sig_gen.write("POW -10 dBm")
            sig_gen.write("OUTP:MOD:STAT OFF")
            time.sleep(1)  # ƒê·ª£i m√°y ph√°t t√≠n hi·ªáu ·ªïn ƒë·ªãnh

            response1 = ""
            while response1.find("- Set") == -1:
                send_and_wait(b"\r\n", expect_prompt="[Remote]$")
                set_freq_iq200 = f"rx_freq {frequency_rx * 1000000}\r\n"
                iq200.reset_input_buffer()
                iq200.write(set_freq_iq200.encode('ascii'))
                iq200.flush()
                time.sleep(2)
                response1 = iq200.read_all().decode('ascii', errors='ignore')
                time.sleep(2)

            response = ""
            while response.find("Waiting for Demod Lock") == -1:
                iq200.write(b"rx\r\n")
                iq200.flush()
                time.sleep(2)   
                response = iq200.read_all().decode('ascii', errors='ignore')
                time.sleep(2)
                iq200.reset_input_buffer()

            # Ph√¢n t√≠ch d·ªØ li·ªáu ph·∫£n h·ªìi
            response_lines = response.splitlines()
            frequency_rx_results = None
            power_rx_results = None
            for line in response_lines:
                if "frequency:" in line:
                    frequency_rx_results = float(line.split(":")[1].strip())
                if "power:" in line:
                    power_rx_results = float(line.split(":")[1].split("#")[0].strip())
                    break

            if frequency_rx_results is not None and power_rx_results is not None:
                results_rx.append([float(frequency_rx), float(frequency_rx_results), float(power_rx_results)])
            else:
                print(f"‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·∫ßn s·ªë ho·∫∑c c√¥ng su·∫•t cho t·∫ßn s·ªë {frequency_rx} MHz")

        sig_gen.write("OUTP OFF")
        print("üìä K·∫øt qu·∫£ ki·ªÉm tra RX:")
        for freq_gen,freq_rx, power in results_rx:
            print(f"- T·∫ßn s·ªë ki·ªÉm tra:{freq_gen} MHz  | T·∫ßn s·ªë thu ƒë∆∞·ª£c {freq_rx} MHz | C√¥ng su·∫•t: {power} dBm")

    except Exception as e:
        print(f"üö® L·ªói trong qu√° tr√¨nh ki·ªÉm tra RX: {e}")


# Ki·ªÉm tra t·∫ßn s·ªë ph√°t IQ200
def test_tx(iq200):
    global results_tx 

    sig_anl.write("SYST:PRES")
    sig_anl.write("INST:SEL SA")
    sig_anl.write("SYST:PRES")
    time.sleep(1)

    try:
        # Nh·∫≠p v√† ki·ªÉm tra d·∫£i t·∫ßn s·ªë ph√°t
        while True:
            freq_input = input("Nh·∫≠p T·∫¶N S·ªê PH√ÅT (MHz) [start, stop, step] (Enter = m·∫∑c ƒë·ªãnh 950-2400-725): ")
            if not freq_input.strip():
                freq_list = np.arange(950, 2400 + 0.01, 725)  # d√πng numpy cho ph√©p s·ªë th·ª±c
                break
            try:
                start_freq, stop_freq, step_freq = map(float, freq_input.split(","))
                freq_list = np.arange(start_freq, stop_freq + step_freq/2, step_freq)  # tr√°nh l·ªách tr√≤n
                break
            except ValueError:
                print("‚ö†Ô∏è Sai ƒë·ªãnh d·∫°ng! Nh·∫≠p theo: start,stop,step (VD: 950,2400,362.5) ho·∫∑c Enter ƒë·ªÉ d√πng m·∫∑c ƒë·ªãnh.")

        # Nh·∫≠p v√† ki·ªÉm tra d·∫£i c√¥ng su·∫•t ph√°t
        while True:
            power_input = input("Nh·∫≠p C√îNG SU·∫§T PH√ÅT (dBm) [start, stop, step] (Enter = m·∫∑c ƒë·ªãnh 0,-35,-17.5): ")
            if not power_input.strip():
                power_list = np.arange(0, -35 + 0.01, -17.5)
                break
            try:
                start_power, stop_power, step_power = map(float, power_input.split(","))
                power_list = np.arange(start_power, stop_power + step_power/2, step_power)
                break
            except ValueError:
                print("‚ö†Ô∏è Sai ƒë·ªãnh d·∫°ng! Nh·∫≠p theo: start,stop,step (VD: 0,-35,-7) ho·∫∑c Enter ƒë·ªÉ d√πng m·∫∑c ƒë·ªãnh.")


        sig_anl.write("SYST:PRES")
        time.sleep(1)

        for frequency_tx in freq_list:
            print(f"\nüì∂ ƒêang ki·ªÉm tra t·∫°i t·∫ßn s·ªë ph√°t: {frequency_tx} MHz")

            for power_level in power_list:
                print(f"‚ö° ƒê·∫∑t c√¥ng su·∫•t: {power_level} dBm")

                sig_anl.write("SYST:PRES")
                send_and_wait(b"\r\n", expect_prompt="[Remote]$")

                set_freq_iq200 = f"tx_cross_pol_test cw {frequency_tx} {power_level * 10} 1 16 1 3\r\n"
                iq200.reset_input_buffer()
                iq200.reset_output_buffer()
                iq200.write(set_freq_iq200.encode('ascii'))
                iq200.flush()
                time.sleep(2)

                early_response = iq200.read_all().decode('ascii', errors='ignore')

                if "Cross polarization test on" not in early_response:
                    time.sleep(8)
                    response1 = iq200.read_all().decode('ascii', errors='ignore')
                else:
                    response1 = early_response

                if "Cross polarization test on" in response1:
                    print("‚úÖ Modem x√°c nh·∫≠n ƒë√£ b·∫≠t Cross Polarization Test.")
                else:
                    print("‚ùå Modem ph·∫£n h·ªìi sai, l·ªánh c√≥ th·ªÉ kh√¥ng ch·∫°y ƒë√∫ng.")

                sig_anl.write("FREQ:START 100 MHz")
                sig_anl.write("FREQ:STOP 11 GHz")
                time.sleep(1)
                sig_anl.write("CALC:MARK:MAX")
                time.sleep(1)

                peak_center = sig_anl.query("CALC:MARK:X?")
                sig_anl.write(f"SENS:FREQ:CENT {peak_center}")
                sig_anl.write("SENS:FREQ:SPAN 100 MHz")
                time.sleep(1)
                sig_anl.write("CALC:MARK:MAX")
                time.sleep(1)
                sig_anl.write("CALC:MARK:CENT")
                time.sleep(1)
                sig_anl.write("SENS:FREQ:SPAN 10 MHz")
                time.sleep(1)
                sig_anl.write("CALC:MARK:MAX")
                time.sleep(1)
                sig_anl.write("CALC:MARK:CENT")
                time.sleep(1)

                peak_freq = round(float(sig_anl.query("CALC:MARK:X?")) / 1_000_000, 4)
                peak_amp = round(float(sig_anl.query("CALC:MARK:Y?")), 4)

                print(f"üéØ Peak Freq: {peak_freq} MHz | üéØ Peak AMP: {peak_amp} dBm")

                results_tx.append((float(frequency_tx), float(power_level), float(peak_freq), float(peak_amp)))

        print("\nüìä K·∫øt qu·∫£ ki·ªÉm tra TX:")
        for freq, power, peak_f, peak_a in results_tx:
            print(f"- T·∫ßn s·ªë test: {freq} MHz | C√¥ng su·∫•t: {power} dBm | Peak: {peak_f} MHz | Amplitude: {peak_a} dBm")

    except Exception as e:
        print(f"üö® L·ªói trong qu√° tr√¨nh ki·ªÉm tra: {e}")


# Ki·ªÉm tra 10 MHz IQ200
def test_10M(iq200):
    global results_10M
    sig_anl.write("SYST:PRES")
    time.sleep(1)

    try:
        sig_anl.write("INST:SEL PNOISE")
        time.sleep(1)

        sig_anl.write("INIT:LPL")
        time.sleep(1)

        sig_anl.write("CALC:LPL:DEC:TABL ON")  # B·∫≠t Decade Table
        time.sleep(1)

        sig_anl.write("SENS:FREQ:CARR:SEAR")  # T√¨m carrier
        time.sleep(1)
        sig_anl.query("*OPC?")
        time.sleep(1)
        sig_anl.write(":SENSE:LPL:FREQ:OFFS:STAR 100")
        sig_anl.write(":SENSE:LPL:FREQ:OFFS:STOP 10E6")
        sig_anl.query("*OPC?")
        time.sleep(20)
        # === Th√™m ph·∫ßn ƒë·∫∑t marker t·∫°i c√°c offset ===
        offsets = [1000, 10000, 100000]  # Offset marker
        for idx, offset in enumerate(offsets, start=1):
            sig_anl.write(f":CALC:LPL:MARK{idx}:MODE POS")
            sig_anl.write(f":CALC:LPLot:MARK{idx}:X {offset}")
            sig_anl.write(f":CALC:LPL:MARK{idx}:TRAC 1")
            time.sleep(1)

            # L·∫•y gi√° tr·ªã v√† l∆∞u v√†o list
            marker_x = float(sig_anl.query(f":CALC:LPL:MARK{idx}:X?"))
            marker_y = float(sig_anl.query(f":CALC:LPL:MARK{idx}:Y?"))
            results_10M.append((marker_x, marker_y))

        # In k·∫øt qu·∫£ ra m√†n h√¨nh
        print("Offset (Hz) | Phase Noise (dBc/Hz)")
        print("-" * 30)
        for x, y in results_10M:
            print(f"{int(x):>10} | {y:>8.2f}")

    except Exception as e:
        print(f"üö® L·ªói trong qu√° tr√¨nh ki·ªÉm tra: {e}")
# S·ª≠ l√Ω k·∫øt qu·∫£
def save_results_to_word():
    global results_tx, results_rx, results_10M, sn_iq200

    # T·∫°o document m·ªõi
    doc = Document()
    doc.add_heading('K·∫øt qu·∫£ ki·ªÉm tra IQ200', level=1)
    doc.add_paragraph(f"Ng√†y ki·ªÉm tra: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    # K·∫øt qu·∫£ TX
    doc.add_heading('K·∫øt qu·∫£ ki·ªÉm tra TX', level=2)
    for freq, power, peak_freq, peak_amp in results_tx:
        doc.add_paragraph(f"T·∫ßn s·ªë test: {freq} MHz | C√¥ng su·∫•t: {power} dBm | Peak: {peak_freq} MHz | Amplitude: {peak_amp} dBm")

    # K·∫øt qu·∫£ RX
    doc.add_heading('K·∫øt qu·∫£ ki·ªÉm tra RX', level=2)
    for freq, freq_rx, power in results_rx:
        doc.add_paragraph(f"T·∫ßn s·ªë: {freq} MHz | C√¥ng su·∫•t: {power} dBm")

    # K·∫øt qu·∫£ 10 MHz
    doc.add_heading('K·∫øt qu·∫£ ki·ªÉm tra 10 MHz', level=2)
    for x, y in results_10M:
        doc.add_paragraph(f"Offset (Hz): {int(x)} | Phase Noise (dBc/Hz): {y:.2f}")

    # ƒê∆∞·ªùng d·∫´n l∆∞u file
    desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
    output_folder = os.path.join(desktop_path, "kiemtraiq200", "ketquakiemtra")
    os.makedirs(output_folder, exist_ok=True)

    file_name = f"kqktiq200_{sn_iq200}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
    file_path = os.path.join(output_folder, file_name)

    # L∆∞u file
    doc.save(file_path)
    print(f"‚úÖ K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o file: {file_path}")

def replace_placeholder_in_paragraphs(doc, placeholder, replacement_text):
    """Thay th·∫ø placeholder trong c√°c ƒëo·∫°n vƒÉn (paragraphs)."""
    for para in doc.paragraphs:
        if placeholder in para.text:
            para.text = para.text.replace(placeholder, replacement_text)

def replace_placeholder_in_tables(doc, placeholder, replacement_text):
    """Thay th·∫ø placeholder trong c√°c √¥ b·∫£ng."""
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                if placeholder in cell.text:
                    cell.text = cell.text.replace(placeholder, replacement_text)

def save_results_to_template(results_tx, results_rx, results_10M):
    # T·∫°o th∆∞ m·ª•c
    desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
    base_folder = os.path.join(desktop_path, "kiemtraiq200")
    template_folder = os.path.join(base_folder, "template")
    output_folder = os.path.join(base_folder, "ketquakiemtra")

    os.makedirs(template_folder, exist_ok=True)
    os.makedirs(output_folder, exist_ok=True)

    template_path = os.path.join(template_folder, "templatekiemtraiq200.docx")
    if not os.path.isfile(template_path):
        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y template: {template_path}")
        return

    doc = Document(template_path)

    # T·∫°o n·ªôi dung thay th·∫ø
    now = datetime.now()
    timestamp = datetime.now().strftime("%m%d%Y_%H%M")
    day = str(now.day)
    month = str(now.month)
    year = str(now.year)

    # Ki·ªÉm tra TX
    tx_text_freq = "ƒê·∫°t"
    tx_text_amp = "ƒê·∫°t"
    for freq, power, peak_freq, peak_amp in results_tx:
        if abs(freq - peak_freq) >= 0.0001:
            tx_text_freq = "Kh√¥ng ƒë·∫°t"
        if abs(power - peak_amp) >= 5:
            tx_text_amp = "Kh√¥ng ƒë·∫°t"

    # Ki·ªÉm tra RX
    rx_text_freq = "ƒê·∫°t"
    for freq, freq_rx, amp in results_rx:
        if abs(freq - freq_rx) >= 0.0001 or abs(amp + 10) >= 5:
            rx_text_freq = "Kh√¥ng ƒë·∫°t"
            break

    # Ghi phase noise v√†o b·∫£ng
    if results_10M and doc.tables:
        table = doc.tables[1]  # Gi·∫£ s·ª≠ b·∫£ng ƒë·∫ßu ti√™n l√† n∆°i ghi phase noise
        for index in range(min(len(results_10M), len(table.rows) * len(table.columns))):
            amp = results_10M[index][1]  # Ch·ªâ l·∫•y bi√™n ƒë·ªô (dBc/Hz)
            row = (index % 4) + 5       # D√≤ng b·∫Øt ƒë·∫ßu t·ª´ 1 (b·ªè qua ti√™u ƒë·ªÅ)
            col = 5
            if row < len(table.rows) and col < len(table.columns):
                table.cell(row, col).text = f"{amp:.2f}"
    # Thay th·∫ø placeholders
    for placeholder, replacement in {
        "{{day}}": day,
        "{{month}}": month,
        "{{year}}": year,
        "{{tx_text_freq}}": tx_text_freq,
        "{{tx_text_amp}}": tx_text_amp,
        "{{rx_text_freq}}": rx_text_freq,
        "{{sn_iq200}}": sn_iq200,
    }.items():
        replace_placeholder_in_paragraphs(doc, placeholder, replacement)
        replace_placeholder_in_tables(doc, placeholder, replacement)

    # L∆∞u k·∫øt qu·∫£
    output_filename = f"pktiq200_{sn_iq200}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
    output_path = os.path.join(output_folder, output_filename)
    doc.save(output_path)

    print(f"‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o: {output_path}")


def display_results():
    global results_tx, results_rx, results_10M
    print("üìä K·∫øt qu·∫£ ki·ªÉm tra ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o file k·∫øt qu·∫£.")
    print(results_tx)
    print(results_rx)
    print(results_10M)
    print("‚úÖ Ho√†n t·∫•t qu√° tr√¨nh ki·ªÉm tra.")

def main():
    global results_tx, results_rx, results_10M
    while True:
        if iq200_login():
            break
        else:
            print("üîë ƒêƒÉng nh·∫≠p kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i...\n")
    iq200_serial()
    # V√≤ng l·∫∑p ki·ªÉm tra
    while True:
        # Th·ª±c hi·ªán c√°c b√†i test]
        results_tx= []
        results_rx = []
        results_10M = []
        test_tx(iq200)
        test_rx(iq200)
        test_10M(iq200)
        display_results()
        save_results_to_word()
        save_results_to_template(results_tx, results_rx, results_10M)

        # H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën ki·ªÉm tra l·∫°i kh√¥ng
        retry = input("\nüîÅ B·∫°n c√≥ mu·ªën ki·ªÉm tra l·∫°i kh√¥ng? (y/n): ").strip().lower()
        if retry != 'y':
            print("\nüéâ Qu√° tr√¨nh ki·ªÉm tra ƒë√£ k·∫øt th√∫c. C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng!")
            break
main()



